# MApp protected configuration
# This file needs to be signed!

# Instructions:
# 1. The following keywords are accepted:
# 1.1. IncludeSection= - lists sections to be included within current section. Sections list should be comma-separated
# 1.2. AllowedCommands= comma-separated command whitelist. Regular command must be formatted as XXXX hex - CLA/INS concatenation,
#      Optionally, NAD can be defined - the command then becomes XXXXXXh.
#      Wildcard (*) is allowed for CLA/INS, then the format must look like *XX or XX*
#      (or, if NAD is defined, XX*XX or XXXX* or XX**). Wildcards are NOT allowed for NAD!
# 1.3. LockedCommands= comma-separated command blacklist.
#
# Note:
# Each section should not define both AllowedCommands and LockedCommands. If both are defined,
# then AllowedCommands key word is ignored. If IncludeSection is used and at least one section defines AllowedCommands,
# then LockedCommands can be used to exclude a subset of commands that are allowed by AllowedCommands.

[allow_reset_and_file_and_display]
AllowedCommands=D000,00**,D001,D201

[disable_pin]
LockedCommands=C40A,C413,DED1,DED2,DED5,DED7,DED6,11**

# The following sections correspond to enum lock_states, defined in CommandMan.h
# Currently defined values are:
# 0 - All OK
# 1 - Safe mode
# 2 - Security error
# 3 - ARS Tripped
# 4 - Tamper
# 5 - SRED error
# 6 - SSL->TCP fallback
# 7 - SRED is active, lock L1 commands

# Normal processing, non-SRED
[lock0]
LockedCommands=C40A,C413

# Safe mode
[lock1]
AllowedCommands=01**

# Security error
[lock2]
IncludeSection=allow_reset_and_file_and_display
EnabledLEDs=7

# ARS tripped
[lock3]
IncludeSection=disable_pin
BlinkingLEDs=3

# Tamper
[lock4]
IncludeSection=disable_pin
EnabledLEDs=4

# SRED error
[lock5]
IncludeSection=allow_reset_and_file_and_display
AllowedCommands=DD20

# Normal processing, SRED enabled
[lock7]
LockedCommands=C40A,C413

# This section configures tokenization
[tokenization]
# 0 – compute token if PAN is returned in the clear
# 1 – always compute token, even if PAN has been masked by SRED
tokenize_sred = 1

# Tokenize responses from for level 1 (NAD 11) commands. 0 - off, 1 - on (default).
tokenize_level_1 = 1

# Key Check Value flag. Only checked if tokenization is enabled.
# 0 - disable KCV generation
# 1 - enable KCV generation
kcv=1

# Generate HMAC configuration IDs
# HMAC is calculated for each configuration ID. For example, if there are three IDs, the following operation is performed:
# HMAC(HMAC(HMAC(PAN, ID1), ID2), ID3)
# Additionally, KCV is generated in the same way as described above, the only difference is that PAN is replaced by 19 bytes long buffer filled with zeroes.
hmac_config_ids=0x06, 0x07

# 1 – embed tokenization tags (DF836F, DF837F, and DF837E if KCV is enabled) into template FF7C (default)
# 0 – send tokenization tags without template
embed_into_template = 1

# Used with HMAC clear text key update "Update Key [C4, 0A]"
# When the parameter HMAC_key_signing is set to 1, tag DFED15 in Update Key command must be sent.
# Tag DFED15 needs to provide HMAC of XOR of the existing (old) key and new key, calculated using existing (old) HMAC key. In other words it should be HMAC_old_key( old_key XOR new_key ).
HMAC_key_signing = 1

# File containing encrypted WW-HASH salts in WW proprietary binary format.
# Salt file must reside in /home/usr1/flash on V/OS and I:1 on Verix eVo.
# salt_file = salt.dat

# File containing RSA public key for PAN encryption.
# The key file must be:
#  * signed
#  * 1024-bit
#  * in X.509 SubjectPublicKeyInfo PEM format
#  * not password protected.
# Resulting encrypted block returned in tag DF836F is 148 bytes of which:
#  * first 128 bytes contain the PAN in ASCII, padded with PKCS#1 v1.5, RSA-encrypted
#  * last 20 bytes contain the fingerprint (SHA-1) of the key file.
# This feature is active when tokenization (HMAC or WW-HASH) is active and properly configured.
# rsa_public_key = rsapubkey.pem

# NOTE: HMAC and WW-HASH tokenization schemes are mutually exclusive therefore defining both hmac_config_ids and salt_file will result in a configuration error. In order to disable tokenization, define neither.

# Mapping of BIN ranges to HMAC config ID sets.
# The entries need to conform to the following format:
#     <BIN from> - <BIN to> = <HMAC config ID> ...
#
# If <BIN from> <= PAN <= <BIN to>, tokenization is performed with the matching <HMAC config ID>s.
# If PAN doesn't match any of the ranges, the hmac_config_ids property from section [tokenization] serves as a default fallback.
#
# All mapping entries must meet the following criteria:
#  * both bounds are inclusive
#  * both bounds have the same digit count, no more than 8
#  * <BIN from> is not greater than <BIN to>
#  * doesn't overlap with any other BIN range
#  * <HMAC config ID>s are of the same format as hmac_config_ids property from section [tokenization]
#  * <HMAC config ID>s describe slots with VSS scripts and necessary keys loaded
# If any of the criteria are not met, the entire HMAC tokenization is rejected.
#
# [bin_to_hmac_config_ids]
# 111111 - 222222 = 0x06, 0x07
# 222223-333333 = 0x07, 0x06, 0x07

#Allow reporting of numeric keys in Keyboard Status [D0, 61] (default: 0).
[keyboard_status]
allow_numeric = 1

# Set of macros that are allowed to be executed with command "Execute VSS Script [C4, 13]"
# Format: "VSS slot id"="[List of macros]"
#         00=[10, 11, FF]
#         3F=[10, 11, FF]
# [allowed_direct_vss_execution]